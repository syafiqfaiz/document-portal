c
auth.uid
auth.slice(:uid).uid
auth.slice(:uid)
auth
c
auth.info.email
auth.info
auth.email
auth
User.where(uid: auth.slice(:uid)).first
User.where(auth.slice(:uid)).first
auth.slice(:uid)
    auth = env["omniauth.auth"]
env["omniauth.auth"]
c
Time.at(auth.credentials.expires_at)
auth.credentials.token
auth.info.name
auth.uid
auth.slice(:uid)
auth.slice(:provider, :uid)
auth
c
subscriptions.where(end_date = ?, >= DateTime.now.to_s).any?
c
subscriptions.where(end_date = ?, >= DateTime.now.to_s).any?
subscriptions.where(end_date = ?, >= DateTime.now.to_s)
subscriptions.where(end_date = ?, >= DateTime.now)
subscriptions.where(end_date = ?, >= DateTime.now).any?
c
@document.count
@document
self
c
@document.file.url
@document.url
@document.file.url.to_s
@document.file.url
@document.file.full_url
@document.file.url
@document.file
@document
c
signed_in?
current_user.is_admin?
current_user.id_admin?
current_user
c
n
@subscription
n
params
c
@subscription.update(terms_and_conditions: params[:subscription][:terms_and_conditions], status: "pending")
c
n
c
@subscription.errors.full_messages
@subscription.update(terms_and_conditions: params[:subscription][:terms_and_conditions], status: "pending")
=> 16:     @subscription.update(terms_and_conditions: params[:subscription][:terms_and_conditions], status: "pending")
c
n
c
n
c
@subscription
n
c
@subscription
c
@subscription = Subscription.find(params[:id])
params[:id]
params
continue
C
QUIT
C
Q
1Q\\
C
APP_CONFIG
c
Figaro.env.admin_name
Figaro.env
Figaro.env.admin_name
Figaro.env.user_name
Figaro.env.stripe_api_key
c
ENV[:admin_name]
env[:admin_name]
env[admin_name]
env["admin_name"]
env
c
data.file.filename
data.form
data.form.path
data.file.name
data.file
data
data.file
data
data.path
data.file.file
data.file
data
c
params
c
params
c
document_params
params
c
user
current_user
c
params
